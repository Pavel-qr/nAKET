#:kivy 2.1.0
#:import pos_pp kivymd.color_definitions.palette
#:import choice random.choice

<WrapLabel@Label>:  # todo inherit from MDLabel and fix colors on Light theme
    size_hint_y: None
    height: self.texture_size[1]  # the size needed to fit the text
    text_size: self.width, None
    halign: 'center'
    valign: 'middle'

<HrefWrapLabel@WrapLabel>:
    markup: True
    on_ref_press:
        import webbrowser
        webbrowser.open(args[1])

<OthersButton@MDRoundFlatButton>:
    pos_hint: {"center_x": .5}
    width: self.parent.width    # to fit screen

<AbstractListItem>:
    md_bg_color: app.theme_cls.primary_dark  # for white text readability
    adaptive_height: True
    orientation: 'vertical'
    spacing: 10

<ToHomeButton@AnchorLayout>:
    anchor_x: 'left'
    anchor_y: 'bottom'
    MDIconButton:
        size_hint: None, 0.14
        width: self.height
        theme_text_color: 'Custom'
        text_color:
            rgba('#000000') if \
            app.theme_cls.theme_style == 'Light' else \
            rgba('#FFFFFF')  # intents not allowed here
        icon: 'arrow-left-bold-outline'
        on_release: self.parent.parent.parent.current = 'home'

<WTasks>:
    ScrollView:
        do_scroll_x: False
        do_scroll_y: True
        on_scroll_y: self.parent.check_update_scroll(self, tasks)

        MDBoxLayout:
            adaptive_height: True
            orientation: 'vertical'
            spacing: 10
            id: tasks

<WTask>:
    size_hint_y: None

    WrapLabel:
        id: teacher
        text: 'Teacher' * 15    # for long text tests
    WrapLabel:
        id: type
        text: 'Task type'
    WrapLabel:
        id: name
        text: 'Task name'

<WSchedule>:
    ScrollView:
        do_scroll_x: False
        do_scroll_y: True
        on_scroll_y: self.parent.check_update_scroll(self, schedule)

        MDBoxLayout:
            adaptive_height: True
            orientation: 'vertical'
            spacing: 10
            id: schedule

<WLesson>:
    WrapLabel:
        id: time
        text: 'time'
    WrapLabel:
        id: name
        text: 'name'

<WMaterials>:
    ScrollView:
        do_scroll_x: False
        do_scroll_y: True
        on_scroll_y: self.parent.check_update_scroll(self, materials)

        MDBoxLayout:
            adaptive_height: True
            orientation: 'vertical'
            spacing: 10
            id: materials

    ToHomeButton:

<WMaterial>:
    WrapLabel:
        id: name
        text: 'name'
    HrefWrapLabel:
        id: url
        text: 'url'
    HrefWrapLabel:
        id: filelink
        text: 'filelink'


<WSessions>:
    ScrollView:
        do_scroll_x: False
        do_scroll_y: True
        on_scroll_y: self.parent.check_update_scroll(self, sessions)

        MDBoxLayout:
            adaptive_height: True
            orientation: 'vertical'
            spacing: 10
            id: sessions

    ToHomeButton:

<WSession>:
    WrapLabel:
        id: date
        text: 'date'
    WrapLabel:
        id: shift
        text: 'первая смена'
    WrapLabel:
        id: name
        text: 'name'
    WrapLabel:
        id: address
        text: 'address'
    WrapLabel:
        id: teacher
        text: 'teacher'

<WTeachers>:
    BoxLayout:
        orientation: 'vertical'
        spacing: dp(10)
        padding: dp(20)
        pos_hint:{'center_x': 0.5, 'y': 0.85}

        BoxLayout:
            size_hint_y: None
            height: self.minimum_height

            MDIconButton:
                icon: 'magnify'

            MDTextField:
                id: search_field
                hint_text: 'Teacher name'
                on_text_validate:
                    root.add_teachers(self.text)

    RecycleView:
        pos_hint:{'center_x': 0.5, 'center_y': 0.4}
        MDList:
            id: teachers

    ToHomeButton:

<WTeacher>:
    WrapLabel:
        id: firstname
        text: 'firstname'
    WrapLabel:
        id: lastname
        text: 'lastname'
    HrefWrapLabel:
        id: reslink
        text: 'reslink'


<WCalendarExport>:
    ScrollView:
        MDBoxLayout:
            orientation: 'vertical'
            adaptive_height: True
            padding: dp(48)
            spacing: dp(15)

            MDTextField:
                id: calendar_name
                hint_text: 'calendar name'
                mode: 'rectangle'
                text: 'SUAI'

            MDRoundFlatButton:
                text: 'create calendar'
                on_press:
                    from source.ggl import GoogleCalendar
                    from source.parse import get_group_rasp
                    from threading import Thread
                    g = GoogleCalendar()
                    rasp = get_group_rasp(root.parent.ids.settings.ids.group.text)
                    Thread(target=g.upload_events, args=(rasp, calendar_name.text)).start()
                    # todo add popup on finish

    ToHomeButton:

<WSettings>:
    ScrollView:
        MDBoxLayout:
            orientation: 'vertical'
            adaptive_height: True
            padding: dp(48)
            spacing: dp(15)

            MDTextField:
                id: login
                hint_text: 'login'
                mode: 'rectangle'
                password: True
                text: app.login
                on_text_validate: app.login = self.text

            MDTextField:
                id: password
                hint_text: 'password'
                mode: 'rectangle'
                password: True
                text: app.password
                on_text_validate: app.password = self.text

            MDTextField:
                id: group
                hint_text: 'group number'
                mode: 'rectangle'
                password: True
                text: app.group
                on_text_validate: app.group = self.text

            MDBoxLayout:
                orientation: 'horizontal'
                spacing: dp(30)

                MDSwitch:
                    pos_hint: {'center_x': .5, 'center_y': .5}
                    width: dp(50)
                    active: app.theme_cls.theme_style == 'Dark'
                    on_active:
                        theme_style = ('Light', 'Dark')[args[1]]
                        app.default_theme = theme_style
                        app.theme_cls.theme_style = theme_style

                MDLabel:
                    halign: 'left'
                    text: 'enable dark theme'

            MDTextField:
                id: primary_palette
                hint_text: 'primary palette'
                mode: 'rectangle'
                text: app.default_primary_palette
                helper_text: ', '.join(choice(pos_pp) for _ in range(3)) + ' etc...'
                helper_text_mode: 'persistent'
                on_text_validate:
                    if self.text not in pos_pp: \
                    self.text = choice(pos_pp)  # indent not allowed
                    app.default_primary_palette = self.text
                    self.theme_cls.primary_palette = self.text

    ToHomeButton:

<Naket>:
    Screen:
        name: 'home'

        MDSwiper:
            swipe_on_scroll: False
            items_spacing: 0

            WTasks:
                id: tasks
            WSchedule:
                id: schedule
            MDSwiperItem:
                ScrollView:
                    MDBoxLayout:
                        orientation: 'vertical'
                        adaptive_height: True
                        padding: dp(48)
                        spacing: dp(15)

                        OthersButton:
                            text: 'settings'
                            on_press: root.current = 'settings'
                        OthersButton:
                            text: 'materials'
                            on_press: root.current = 'materials'
                        OthersButton:
                            text: 'sessions'
                            on_press: root.current = 'sessions'
                        OthersButton:
                            text: 'google calendar'
                            on_press: root.current = 'calendar_export'
                        OthersButton:
                            text: 'teachers'
                            on_press: root.current = 'teachers'

    WMaterials:
        id: materials
        name: 'materials'

    WSessions:
        id: sessions
        name: 'sessions'

    WSettings:
        id: settings
        name: 'settings'

    WTeachers:
        id: teachers
        name: 'teachers'

    WCalendarExport:
        id: calendar
        name: 'calendar_export'
